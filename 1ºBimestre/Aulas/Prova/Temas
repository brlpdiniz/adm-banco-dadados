## Prova Teórica

### Quando usar Procedures?
- Características

### Qual a diferença entre login e usuário?
- Login - Dá acesso ao servidor (instância)
- Usuário - Dá acesso ao banco de dados

### Backup
- Bkp diferencial - pega tudo desde o full
- Bkp incremental - pega tudo desde o último incremental

### Índices
- Índices - Qual a diferença entre eles?
- Clustered
  * O índice clusterizado é quase um sinônimo de chave primária. De fato só pode usar um por tabela e tem que ser na ordem da inserção dos dados, o que obviamente exclui chaves primárias naturais. Em um índice assim a chave é a posição onde o dado está. Na verdade ele é a própria tabela.
- NonClustered
  * O índice não clusterizado são todos os outros índices onde você terá uma chave qualquer e um apontador para a tabela de dados. Então há sempre duas pesquisas, uma no índice non-cluster e depois sabendo qual a posição dele buscará o dado de fato na tabela, que até pode ser um índice clusterizado.
- Enquanto os índices clusterizados ordenam fisicamente tanto as linhas da tabela quanto os próprios índices e mantêm os mesmos próximos uns aos outros; os não-clusterizados ordenam somente o índice em si, e não as linhas (que são salvas sempre de forma aleatória no disco).

## Subconsulta
### TIPOS DE SUBCONSULTA - SUBQUERY
• Com uma linha
  - São comandos SELECT aninhados em outros comandos SELECT, INSERT, UPDATE ou DELETE ou outras SUB-CONSULTAS
  - Muitas sentenças SQL que incluem SUBQUERIES podem ser formuladas de modo alternativo através de JOINS
• Operador any / some
• Operador in
• No having
• Correlacionada
• Com operador exists
  - Retorna VERDADEIRO ou FALSO;
  - É um operador que tem como argumento um SELECT;
  - A SUBQUERY não devolve nenhuma tabela resultante;
  - EXISTS pode ser negado por um NOT;
  - Intersect (interseção)
• Except (diferença)
• Divisão

### UNION e UNION ALL
• Consultar informações pertencentes a mais de uma tabela e que são obtidas com a execução de mais de um comando SELECT;
• Regras:
  - As colunas devem ser do mesmo tipo, ou seja, (string com string, int com int…);
  - É necessário que os comandos SELECT apresentem o mesmo número de colunas;
  - Elimina linhas duplicadas do resultado.
  - A inclusão de WHERE pode ser feita em qualquer um dos comandos SELECT;
  - O apelido (alias) das colunas, quando necessário, deve ser incluído no primeiro SELECT;
  - Para dados ordenados, o último SELECT deve ter uma cláusula ORDER BY;
  - UNION ALL: não elimina as linhas duplicadas.


## Tabelas Temporárias e Variáveis de Tabela
### TABELAS TEMPORÁRIAS:
  • São utilizadas com maior frequência para armazenar resultados intermediários no processamento de dados.
  • Normalmente utilizadas dentro de procedures.
  • Tipos:
    - Tabelas temporárias:
      * Locais
        - Fica acessível apenas para o usuário e na conexão em que ela foi criada;
        - Para identificar um tabela temporária local, utiliza-se o símbolo #
      * Globais
        - Para identificar um tabela temporária global, utiliza-se dois símbolos ##;
        - É visualizada por todas as conexões ativas.
    - Variáveis de Tabela;
  
  • Caraterísticas
    - Existirá somente enquanto a conexão estiver ativa;
    - Ao encerrar a conexão a tabela é automaticamente eliminada;
    - Não é criada na base de produção. É criada no banco TEMPDB;
    - Sua utilização é idêntica a uma tabela normal;
  
### VARIÁVEIS DE TABELA:
  • São uma opção para armazenamento temporário de dados, em substituição às tabelas temporárias.
  • Vantagens:
    - Não consomem recursos para controle de bloqueios. São estritamente locais.
    - A manipulação de dados é mais eficiente porque essas operações são minimamente logadas (Transação).
    - Procedures que utilizam de variáveis tipo TABLE tem um número menor de recompilações quando comparadas às tabelas temporárias.
  • Desvantagens:
    - A vida útil está limitada ao procedimento onde esta sendo utilizada.
    - Com variáveis tipo TABLE não é permitido:
      * Criação de índices não-cluster, constraints CHECK, DEFAULT;
      * Criação e/ou atualização de estatísticas;
      * Alteração da estrutura da tabela;
      * Não pode ser o destino de INSERT EXEC ou SELECT INTO;
    - Exemplo:
    ```
    declare @exemplo table (
      id int,
      name varchar(32)
    );
    ```

### Diferenças entre Tabelas Temporárias e Variáveis de Tabela:
• Tabelas temporárias:
  - Gravadas fisicamente (TEMPDB);
  - Permite utilizar índices;
  - São visíveis apenas enquanto a conexão está ativa.

• Variáveis de tabela:
  - Armazenadas em memória;
  - Utiliza menos recursos com bloqueio;
  - As operações são minimamente logadas;
  - Gera menos recompilação;

• PERFORMANCE:
  - Tabela temporária trabalha melhor com uma grande massa de dados;
  - Variável do tipo TABLE tem uma performance melhor com uma pequena quantidade de registros.


## Transação
• Uma sequência de operações que são tratadas como um bloco único e indivisível (atômico) no que se refere à sua execução.
• Todas as operações contidas na transação devem ser finalizadas com sucesso ou nenhuma delas deve ser realizada;
  
• Princípo:
  - “Ou você tem todos os seus dados íntegros e consistentes no seu banco ou não tem dado algum”.
  
• Término::
  - COMMIT: Termina com sucesso uma transação.
  - ROLLBACK: Termina indicando que houve um erro.

• Tipos:
  - IMPLÍCITAS: Ocorrem automaticamente quando enviamos os comandos INSERT, UPDATE e DELETE;
  - EXPLÍCITAS: Segue o conceito formal de transações onde deve-se indicar o início e o término da mesma;

• Propriedaes - ACID:
  - Atomicidade
    * A transação deve representar uma unidade de trabalho INDIVISÍVEL
    * Garante que todas as operações na transação serão executadas ou nenhuma será
    * Isto evita que falhas ocorridas, possam deixar a base de dados inconsistente;
  - Consistência
    * Ao final da transação, todos os dados devem estar em um estado consistente em um BD relacional;
    * Estado consistente, significa que todas as regras e a integridade referencial tenha sido respeitada;
    * As ações não devem violar as restrições de integridade do BD;
  - Isolamento
    * Significa que, mesmo no caso de transações executadas concorrentemente, o resultado final é igual ao obtido com a execução isolada de cada uma delas;
    * Garante que uma determinada transação não usará dados em um estado intermediário;
  - Durabilidade
    * Uma vez encerrada a transação, as alterações por ela efetuadas serão definitivas;
    * Significa que os resultados de uma transação, caso ela seja concluída com sucesso, devem ser persistentes. Mesmo se depois houver uma falha no sistema;

• Variáveis
  - @@ERROR Valor 0 (zero) caso não ocorra nem um erro , no caso de algum erro valor 1 (um).
  - @@TRANCOUNT Retorna o número de transações ativas;

• Funções
  - RAISERROR() Permite enviar uma mensagem de erro facilitando na hora de algum suporte.
  - ERROR_NUMBER() Retorna o número do erro;
  - ERROR_MESSAGE() Exibe a mensagem do erro;
  - ERROR_SEVERITY() Retorna o grau de severidade do erro;
  - ERROR_LINE() Retorna a linha em que o erro ocorreu;

• Comandos
  - Begin transaction
  - Commit transaction
  - Rollback transaction [ savepoint ]
  - Save transaction

  - A partir da versão 2005, o SQL Server, permite implementar o tratamento de erros através do bloco TRY-CATCH;
    * Quando um erro ocorre no dentro do bloco TRY a execução é desviada para o bloco
    * CATCH, o que permite continuar a execução do script ou interrompê-lo;
    * Este bloco é formado por dois sub-blocos:
    * TRY: Comandos necessários para executar a tarefa desejada;
    * CATCH: Comandos para tratamento de possíveis erros ocorridos no bloco TRY;

• Savepoint:
  - Define o local para o qual a transação deve retornar se parte da transação é condicionalmente cancelada.
  - Exemplo:
    * Se na transação for utilizado um SAVEPOINT, e a mesma for cancelada (ROLLBACK), a primeira parte da transação, até o SAVEPOINT, não será desfeita;


## VIEW
• É qualquer relação que não faz parte do modelo lógico do banco de dados, mas que é visível ao usuário, como uma relação virtual;
• O SGBD armazena sua definição ao invés do resultado da expressão SQL que a definiu;
• Alternativa de observação de dados de uma ou mais tabelas, que compõem uma base de dados.

• Características:
  - Sempre que a relação visão é usada, ela é sobreposta pela expressão da consulta armazenada;
  - Pode ser considerada como uma tabela virtual ou uma consulta armazenada.
  - Implementa de maneira encapsulada uma instrução SELECT;
  - Podem ser implementadas também com algumas aplicações de restrição.

• Benefícios:
  - Mecanismo de segurança, pois pode restringir o acesso aos dados;
  - Pode restringir quais as colunas da tabela, podem ser acessadas;
  - Consulta SELECT, usada frequentemente pode tornar-se uma visão;

• Limitações:
  - Referenciar tabelas temporárias, variáveis ou outros tipos;
  - Conter a cláusula ORDER BY ao menos que especifique o operador TOP;

• Exemplo:
  ```
    create view mostraLivros as
    select titulo, preco_venda from livro
  ```


## Funções - UDF (Funções Definidas pelo Usuário)
• Não fazem parte do conjunto de funções do SQL Server;
• Podem retornar valores comuns ou mesmo um valor no formato de uma tabela, com múltiplas ocorrências;
• Erros encontrados em instruções Transact-SQL interrompem seu processamento.

• Comandos de definição:
  - CREATE FUNCTION para criar a UDF
  - ALTER FUNCTION para alterar a função
  - DROP FUNCTION: Para remover as funções UDF

• Tipos:
  - Scalar valued functions;
    * Retorna um único valor;
    * Utiliza-se a instrução RETURN com um argumento;
    * O tipo de retorno, pode ser qualquer um dos tipos de dados conhecidos como scalar_data_types do SQL Server exceto: timestamp, text, ntext, or image.
    * Nas chamadas às funções do tipo scalar, deve-se utilizar:
      * 1º) nomeUsuário.nomeFunção
      * 2º) nomeBanco.nomeUsuário.NomeFunção

  - Inline table valued functions;
    * Possui cláusula RETURNS seguida da palavra TABLE sem uma lista de colunas;
    * Retornam valores apresentados como se extraídos de tabelas e são definidas com uma única instrução SELECT em sua construção;
    * As colunas, incluindo os tipos de dados retornados pela função, são derivados da lista da instrução SELECT que define a função;
    * Não requer BEGIN, END na criação do seu corpo.
    * Como chamar:
      * select * from dbo.clientesCidade(1);

  - Multi-statement table valued functions.
    * Utilizada para lógicas mais complexas que costumam conter condicional;
    * Retorna uma tabela;
    * Pode-se definir chave primária, identity, etc, no retorno da tabela;

### Boas práticas em performance:
  - Usar scalar functions complexas em resultados pequenos;
  - Usar In-line functions para criar views parametrizadas;
  - Usar In-line functions para filtrar views indexadas.
  - Usar Multi-statement functions ao invés de stored procedures para retornar tabelas;


## Cursores
- Ao executamos um comando SELECT, UPDATE ou DELETE em uma tabela do banco de dados, são acessados vários registros de uma só vez;
- O número de registros retornados depende do tamanho da tabela e da forma com que são buscados em conjunto com a cláusula WHERE, que realiza uma filtragem nos dados selecionados.
- As operações com conjuntos de linhas é uma das características que define um banco de dados relacional;
- Um conjunto pode ser vazio ou poderá conter uma única linha, mas ainda assim será um conjunto;
- Existem situações em que trazer os registros de uma só vez não é conveniente ou possível para realizar certos tipos de operações, onde é necessário obter resultado de cada linha uma a uma;
- Nestes casos os SGBD’s fornecem um recurso bastante interessante chamado CURSOR.

- É uma instrução SELECT que será acessada linha a linha através de um laço WHILE e alguns comandos específicos para cursores;
- Utilizado normalmente em procedimentos armazenados;
- Permitem a realização de operações sobre linhas individuais de um resultado.
- Podem executar operações como: atualizar, excluir ou mover dados;
- São criados usando o comando DECLARE CURSOR;

- Algumas Características dos cursores:
  * Capacidade de refletir alterações em dados subjacentes;
  * Capacidade de rolar pelo conjunto de linhas;
  * Capacidade de atualizar o conjunto de linhas.

- O conjunto de linhas para o qual um cursor aponta é definido pelo comando SELECT.;
- Algumas restrições SELECT ao se criar um cursor T-SQL:
  * Não poderá retornar vários conjuntos de linhas;
  * Não poderá conter a cláusula INTO para criar uma nova tabela;
  * Não poderá conter a cláusulas COMPUTE ou COMPUTE BY;
  * Poderá conter funções agregadas, tais como AVG.

- Etapas para utilização do cursor:
  * 1) Declaração do cursor;
  * 2) Abertura do cursor;
  * 3) Execução do cursor;
  * 4) Fechamento do cursor;
  * 5) Dessalocar o cursor.

- Opções da declaração do cursor:
  * LOCAL: O escopo do cursor é local;
  * GLOBAL: O escopo do cursor é global para a conexão;
  * FORWARD_ONLY: Só pode ser rolado da primeira à última linha.
      * FETCH NEXT é a única opção de busca com suporte.
  * o SCROLL: Todas as operações de movimentação poderão ser realizadas. Especifica que todas as opções de busca (FIRST, LAST, PRIOR, NEXT, RELATIVE, ABSOLUTE).
 
### FETCH - Leitura das linhas de cursor:
- Realiza a movimentação em um cursor, permitindo percorrê-lo linha a linha.
  * NEXT: move para a próxima linha do cursor ou para a primeira;
  * PRIOR: move para a linha anterior;
  * FIRST: move para a primeira linha;
  * LAST: move para última linha;
  * ABSOLUTE n: move para a linha de posição n no cursor (se for positivo, a contagem inicia na primeira linha, se negativo, na última);
  * RELATIVE n: move para n linhas para frente ou para trás.

  * INTO @variavel1[, @variavel2…]: permite associar cada coluna do cursor a uma variável declarada;
  * Cada variável listada no comando FETCH deverá estar relacionada a uma coluna do cursor;
  * A variável deve possuir o mesmo tipo da coluna, não sendo realizadas conversões implícitas.

  * Para ler todo o cursor, ou seja, todas as linhas que estão armazenadas utiliza-se o comando WHILE;
  * A variável @@FETCH_STATUS retorna informações sobre o último comando FETCH que foi lançado:
    *  0: O FETCH foi realizado com sucesso;
    * -1: O FETCH falhou;
    * -2: O registro trazido foi perdido.
  
## Índice / Index
• Estrutura auxiliar que melhora o desempenho das consultas;
  - Auxilia o SQL a buscar um determinado registro de forma mais eficiente;
  - Reduz o número de operações de I/O necessárias para localizar os dados solicitados pela consulta;
  - O tipo de índice mais usado é o chamado B-Tree.

• Colunas que devem ser indexadas:
  - Usadas nas cláusulas ORDER BY e GROUP BY;
  - Pesquisadas com frequências como: Chaves primárias (PK) ou Chaves externas (FK) ou colunas usadas frequentemente para unir tabelas;
  - Pesquisadas para a localização de faixa de valores de chave. (clausulas IN, NOT IN, BETWEEN).

• Colunas que NÃO devem ser indexadas:
  - Raramente são usadas em uma consulta;
  - Poucos valores únicos. Por exemplo, um índice em uma coluna com dois valores, Masculino e feminino, retorna uma alta porcentagem de registros.
  - Tipos de dados text, ntext e image. Não é possível indexar colunas com esses tipos de dados.

• Tipos de índices:
  - Clustered index
    * Eficiente para agilizar as operações de localização de registros;
    * Existe um pequeno “over-head” para operações de atualização, inserção e exclusão;
    * A ordem física das páginas de dados é a mesma ordem do índice.
    * A primary Key (PK), automaticamente essa coluna torna-se um índice Clustered;
    - Recomendado nas seguintes situações:
      * Na coluna que representa a ordem mais natural da tabela, ou seja, a ordem na qual geralmente os resultados serão apresentados.
      * Cada tabela só pode ter um índice CLUSTERED.
      * Colunas usadas com ORDER BY e GROUP BY.

  - Nonclustered index.
    * Possui uma ordem física diferente da ordem dos dados;
    * Pode haver mais de um índice não agrupado na tabela, até o máximo de 249 índices;
    - Recomendado nas seguintes situações:
      * Colunas que são usadas nas cláusulas ORDER BY e GROUP BY;
      * Colunas que são frequentemente utilizadas como condições na cláusula WHERE
  
  - Procedures:
    * SP_HELPINDEX: Retorna as informações sobre os índices de uma tabela.
    * SP_SPACEUSED: Retorna as informações sobre o espaço ocupado por uma tabela.

• Tabela HEAP:
  - Tabela que não possui índice;
  - Uma tabela HEAP é difícil de exisitir. Normalmente as tabelas possuem PK e FK, ou seja, isso já criaria índices.
  - Ao fazer uma busca em uma tabela HEAP, é executado o Full scan (table scan), ou seja, uma varredura na tabela para encontrar os registros desejados.
  - Com o passar do tempo e as operações de inclusão, alteração e exclusão dos registros essas tabelas ficarão com “buracos” espaços.

• Resumo:
  - A Primary Key (PK) é um índice B-Tree Clustered Index.
  - A Foreign Key (FK) é um índice B-Tree NonClustered Index
  - O B, do B-TREE, é de “Balance Tree” porque o índice sempre tentar balancear os lados da árvore.

### Plano de execução
• Introdução:
  - Informações precisam ser disponibilizadas de forma eficiente e eficaz, ou seja, com rapidez e qualidade.

• Definição:
  - Uma maneira simples do Query Optimizer calcular o caminho mais eficiente para implementar uma requisição representada pelo T-SQL, quando esta for submetida dentro SQL Server.

• Modo gráfico
  - Estimado;
  - Atual: Necessário executar o script antes que o plano seja gerado;
  - Deve ser lido da direita para a esquerda;


## Backup e Restore
• Por que fazer BACKUP?
  • Recuperar seus dados de muitas falhas, como:
    - Falha de mídia;
    - Erros de usuário, que removem uma tabela por engano;
    - Problemas de hardware, disco danificado ou perda permanente de um servidor;
    - Desastres naturais.
  • Funções administrativas:
    - Copiar um BD de um servidor para outro, configurar o espelhamento do BD.
  
  • Ter uma estratégia:
    - Para minimizar a perda de dados;
    - Para recuperar dados perdidos;
    - Para restaurar dados com custo mínimo e do impacto;
  
  • Banco dados possui 2 ou 3 arquivos físicos;
    - Dois de dados e o outro de log de transações: os arquivos são:
      * Para os dados (primários (MDF));
      * Secundário (NDF) (não obrigatório);
      * Logs de transação (LDF);
    
  • SQL SERVER:
    - Permite que os backups ocorram enquanto os usuários utilizam o BD.
    - Realiza o backup dos arquivos originais e grava em arquivos locais.
    - Salva no backup todas as atividades do BD que ocorrem durante o processo de backup.
    - O arquivo de backup armazena mais de um backup. Isso é definido na clausula INIT ou NOINIT.
  
  • Tipos de backup:
    - Completo (Full)
      * Gera cópia total e integral de todo o banco.
      * É a base para a recuperação de um banco de dados e deve existir antes que você utilize qualquer outro tipo.
      * Durante a operação de backup full, só existem duas operações que não podem ser realizadas:
        * adicionar/remover arquivos do banco e reduzir o banco.
    - Diferencial (Diferential)
      * Gera cópia dos dados alterados após o último Backup Full;
      * É acumulativo, ou seja, um backup diferencial feito após outro backup diferencial, contém todas alterações realizadas após o backup Full;
      * Só pode ser usado quando há um backup full já realizado;
    - Log de transação ( Transaction Log)
      * Os arquivos de log de transação contêm as alterações feitas no banco de dados. Ele possui duas partes: a ativa e a inativa.
        * Ativa: Contêm informações que ainda não foram efetivadas no BD;
        * Inativa: Contêm as informações que já foram efetivadas.
      * Captura todas as transações efetivadas no log desde o último backup de log ou backup full;
      * É ele quem garante a integridade e consistência da base em casos de falha, e também permite através de operações de BACKUP / RESTORE;
      * Só pode ser usado quando há um backup full;
    - Grupo de Arquivos (File Group)
      * Pode-se realizar backup somente de um arquivo ou de um grupo de arquivos. Com isso a operação de backup se torna mais rápida e a restauração também.

  • Backup Completo - Etapas:
    - Backup Full + Differential + Logs
  
  • Restore do Log de Transações:
    - Deve haver um backup Full precedente aos backups de logs, e que TODOS os arquivos de backups de log sejam restaurados na sequência desde o Full;
    - A sequência lógica é restaurar o Backup Full, em seguida o Backup Differential e então todos os Backups de Log na sequência

  • Restore ao Ponto da Falha “Point In Time”:
    - Executado exatamente igual ao RESTORE do LOG, porém é informado a opção STOPAT na cláusula de RESTORE, que informa onde o RESTORE deve “PARAR”.


## Segurança
### Introdução
  - De modo simplificado, a segurança no acesso às informações significa que o usuário deve ser capaz de acessar os dados necessários com nível de acesso suficiente (e não mais do que suficiente), para que o usuário realize seu trabalho.
  - Através do mecanismo de segurança também evitamos que pessoas não-autorizadas tenham acesso aos dados.

  - Com esses elementos podemos controlar o acesso aos bancos de dados da instancia e aos seus objetos.
    * Logins
    * Usuários (User Accounts)
    * Papéis (Roles)
    * Permissões (Permissions)

 - Controle de Acesso
  * O primeiro passo para que o usuário possa acessar o servidor SQL Server é estabelecer uma conexão com uma instância do servidor SQL Server.
  * Esse processo de autenticação pode ser pelo:
    * Windows Authentication;
    * Modo mixed / SQL Server Authentication.
  
  - Autenticação de usuário
    * LOGIN: Dá acesso a instância do SQL Server
    * USUÁRIO: Dá acesso ao banco de dados

    * Observações:
      * LOGIN e o Usuário podem ou não serem vinculados
      * Usuário sempre vai ter vinculo com um LOGIN
    
  - Roles – Função / Papel:
    * Pode-se utilizar Roles para simplificar a atribuição de permissões de acesso aos objetos do SQL Server.
    * São semelhantes ao conceito de grupos de usuários do Windows.
    * As Roles podem ser:
      - De servidor: Privilégios administrativos no nível do servidor. São independentes do BD.
      - Banco de dados: Privilégios administrativos no nível do banco de dados.
      - Própria: Pode-se criar Roles próprias para melhor gerenciar os usuários

  - Roles de servidor
    * Dbcreator - Criam e alteram os bancos de dados
    * Diskadmin - Gerenciam os arquivos do disco
    * Processadmin - Gerenciam os processos do SQL Server
    * Securityadmin - Gerenciam e auditam os logins do servidor
    * Serveradmin - Configuram as definições do servidor
    * Setupadmin - Instalam a duplicação
    * Sysadmin - Executam qualquer atividade
    * (bulkadmin) - Executam a instrução BULK INSERT

  - Roles de Banco de dados
    * public - Mantém todas as permissões padrão;
    * db_owner - Executa qualquer atividade de cargo de BD
    * db_accessadmin - Adiciona ou remove usuários, grupos e cargos do DB
    * db_ddladmin - Adiciona, modifica ou elimina objetos do BD
    * db_securityadmin - Atríbuí permissões de objetos e instruções
    * db_backupoperator - Backup de banco de dados
    * db_datareader - Lê os dados de qualquer tabela
    * db_datawriter - Adiciona, altera ou exclui dados de todas as tabelas
    * db_denydatareader - Não pode ler dados de nenhuma tabela
    * db_denydatawriter - Não pode alterar dados em nenhuma tabela
  
  - Roles - Procedures:
    * sp_addrole - Adiciona uma nova ROLE
    * sp_droprole - Exclui uma ROLE
    * sp_helprole - Fornece informações sobre todas as roles do BD
    * sp_grantdbaccess - Adicionar um logins à lista de usuários autorizados a acessar um BD
    * sp_revokedbaccess - retirar a permissão de acesso do usuário a um Banco de Dados
    * sp_addsvrrolemember - adicionar um usuário a uma role de servidor
    * sp_dropsvrrolemember - excluir um usuário de uma role do servidor
    * sp_addrolemember - adicionar um usuário a uma role de Banco de Dados
    * sp_droprolemember - Para excluir um usuário de uma role de Banco de Dados
  
  - Permissões - DCL – Linguagem de controle de dados:
    * Controlar o acesso dos usuários aos objetos de um banco de dados ou servidor;
    * Previlégios: Connect, create, select, insert, update, delete, execute
    * Podem ser: por usuário ou por objeto;
    * Comandos:
      * GRANT: Concede permissão para executar a tarefa relacionada;
      * DENY: Nega permissão para executar tarefas;
      * REVOKE: remove a permissão.
  

## Stored Procedure
  • Características:
    - Biblioteca de comandos em SQL para utilização junto ao BD;
    - Armazena tarefas repetitivas;
    - Pode conter parâmetros de entrada e de saída, instruções de comparação (if), loops (while) operadores, variáveis, funcões, etc;
    - São basicamente blocos de instruções SQL compiladas num único plano de execução;
    - Podem ser chamadas por outra SP ou por aplicativos Java, PHP, ASP, Delphi, VB, etc;

  • Quando utilizar:
    - Várias aplicações escritas em diferentes linguagens, ou que rodam em plataformas diferentes, porém executam a mesma função;
    - Prioridade à consistência e segurança dos dados armazenados no BD.
  
  • Vantagens:
    - Facilita a manutenção e a alteração das aplicações;
    - Ocultar a complexidade de acesso ao BD;
    - Recebe parâmetros de entrada e retorna resultados;
    - Reduz o tráfego de rede gerado pela aplicação;
    - Facilita e centraliza o gerenciamento de permissões;
    - Melhora a velocidade de execução.
  
  • Segurança:
    - Aplicações e usuários não tem nenhum tipo de acesso às tabelas do BD;
    - Os usuários podem apenas executar as SP;
    - Executam ações específicas e determinadas pelos DBAs e desenvolvedores.
  
  • Regras:
    - Usar transações, para poder ‘voltar’ os dados em caso de problemas;
    - Retornar somente os dados necessário, evitando tráfego na rede desnecessário;
    - Usar identação;
    - Comentar o código;
  
  • Tipos:
    - Temporary: criadas pelo SQL-Server, Manutenção e gerenciamento de conexões.
    - System: manutenção e gerenciamento (sp_);
    - Extended: funções externas, ligadas ao SO, Extensão (xp_);
    - User-defined: Criadas pelos usuários.
  
  • Algumas procedures do SQL Server:
    - SP_STORED_PROCEDURES: Retorna uma lista das SPs existentes no BD;
    - SP_HELP: Mostra informações sobre qualquer objeto do BD;
    - SP_HELPTEXT: Mostra os comandos de uma SP;
    - SP_DATABASES: retorna informações sobre os bancos de dados;
    - SP_TABLES: informações sobre tabelas;
    - SP_COLUMNS nome_do_objeto: retorna informações sobre as colunas de um objeto;
    - SP_HELPINDEX nome_do_objeto: informações sobre os índices de um objeto.
  

## Triggers
• Conjunto de instruções SQL, que é executado automaticamente em consequência de uma ação (INSERT, UPDATE, DELETE) sobre uma tabela;
• Sua execução está associada a uma tabela;
• As ações de uma trigger podem ser sobre qualquer tabela da base de dados;

• Pode-se definir “Regras de Negócio” do BD;
• Pode-se usar TRIGGERS para exclusão e atualização em cascata;
• Se o comando que está sendo executado violar a definição de uma CONSTRAINT definida, a TRIGGER não irá disparar.

• Tipos:
  - AFTER / FOR;
    * Disparada quando as operações especificadas no comando de disparo forem executadas com sucesso;
    * As CONSTRAINTS devem ter sido bem sucedidas antes da trigger ser executada.
    * É o tipo padrão;
  - INSTEAD OF.
    * Disparada ANTES dos comandos serem executados;
    * Processa as CONSTRAINTS antes da execução da trigger;
    * Para alteração em cascata devemos usar a trigger “instead of”.

• TRIGGER tem acesso a duas tabelas especiais:
  - DELETED TABLE e INSERTED TABLE;
  - Essas tabelas existem apenas na memória do servidor, não sendo gravadas em disco;
  - Os registros dessas tabelas são acessíveis somente durante a execução da TRIGGER.

• DELETED
  - Armazena cópias de registros afetados por um comando DELETE ou UPDATE;
  - Armazena os registros antes da alteração;
• INSERTED:
  - Armazena cópias dos registros afetados por um comando INSERT ou UPDATE;
  - Armazena os registros depois da alteração.

• Para desabilitar temporariamente uma trigger:
  - alter table nomeTabela
  - disable trigger nomeTabela

